Index: system/main_window.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from IPython.external.qt_for_kernel import QtCore\r\nfrom PyQt5 import uic\r\nfrom PyQt5.QtCore import Qt\r\nfrom PyQt5.QtWidgets import QMainWindow, QAction, QFileDialog, QMessageBox, QToolBar, QTableWidget, QCheckBox, \\\r\n    QTableWidgetItem, QHeaderView, QPushButton\r\n\r\nfrom xray_viewer import XRayViewer\r\nfrom ct_viewer import CTViewer\r\nfrom patient_manage import PatientManageWindow\r\nimport SimpleITK as sitk\r\nimport os\r\nfrom settings_dialog import SettingsDialog\r\n\r\nclass MainWindow(QMainWindow):\r\n    def __init__(self):\r\n        super().__init__()\r\n        uic.loadUi(\"ui/main_window.ui\", self)  # Load the UI from XML file\r\n        #ui_path = os.path.join(os.path.dirname(__file__), \"system/ui/main_window.ui\")\r\n        with open('ui/button_style.qss', 'r', encoding='utf-8') as f:\r\n            #content = f.read()\r\n            self.setStyleSheet(f.read())\r\n        # 获取表格的引用（从 .ui 文件中获取）\r\n        self.tableWidget = self.findChild(QTableWidget, 'tableWidget')\r\n        self.patient_manage_window = PatientManageWindow(self.tableWidget)\r\n        self.setWindowTitle(\"Medical Image Viewer\")\r\n        self.setGeometry(100, 100, 1200, 800)\r\n        self.viewer = None  # Will hold the current image viewer\r\n        self.render_on_open = False\r\n        self.initUI()\r\n\r\n    def initUI(self):\r\n        # Create actions\r\n        open_action = QAction('Open Image', self)\r\n        open_action.triggered.connect(self.open_image)\r\n\r\n        save_as_action = QAction('Save As', self)\r\n        save_as_action.triggered.connect(self.save_image)\r\n\r\n        exit_action = QAction('Exit', self)\r\n        exit_action.triggered.connect(self.close)\r\n        \r\n        # Create settings action\r\n        settings_action = QAction('Settings', self)\r\n        settings_action.triggered.connect(self.open_settings)\r\n\r\n        # Create menu bar\r\n        menubar = self.menuBar()\r\n        file_menu = menubar.addMenu('File')\r\n        file_menu.addAction(open_action)\r\n        file_menu.addAction(save_as_action)\r\n        file_menu.addAction(exit_action)\r\n        file_menu.addAction(settings_action)\r\n        self.file_menu = file_menu\r\n\r\n        # Save the action for later use\r\n        self.save_as_action = save_as_action\r\n        \r\n        # Create a toolbar\r\n        toolbar = QToolBar(\"Main Toolbar\")\r\n        self.addToolBar(toolbar)\r\n\r\n        # Add \"Generate Model\" button to the toolbar\r\n        # generate_model_action = QAction('Generate Model', self)\r\n        # generate_model_action.triggered.connect(self.generate_model)\r\n        # generate_model_action.setEnabled(False)\r\n        # toolbar.addAction(generate_model_action)\r\n        # self.generate_model_action = generate_model_action\r\n\r\n        self.design_table()\r\n        self.open_action.clicked.connect(self.open_image)\r\n        self.exit_action.clicked.connect(self.close)\r\n        self.settings_action.clicked.connect(self.open_settings)\r\n        # Connect Patient Management button\r\n        self.sure.clicked.connect(self.open_patient_manage)\r\n        self.deleteButton.clicked.connect(self.patient_manage_window.on_delete_patient_info)\r\n\r\n        # Status bar\r\n        self.statusBar().showMessage('Ready')\r\n\r\n    def design_table(self):\r\n        self.tableWidget.setEnabled(True)  # 启用表格交互\r\n\r\n        \"\"\"填充表格并为每一行添加复选框\"\"\"\r\n        self.tableWidget.blockSignals(True)  # 暂时禁用信号\r\n        # 调整每一列的宽度\r\n        self.tableWidget.setColumnWidth(0, 100)  # 设置第一列宽度为100\r\n        self.tableWidget.setColumnWidth(1, 150)  # 设置第二列宽度为200\r\n        self.tableWidget.setColumnWidth(2, 150)  # 设置第三列宽度为150\r\n        # 最后一列自动填充剩余宽度\r\n        self.tableWidget.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)\r\n\r\n\r\n        #rows = 5  # 表格的行数\r\n        # 获取当前表格的行数\r\n        rows = self.tableWidget.rowCount()\r\n        for row in range(rows):\r\n            self.tableWidget.setRowHeight(row, 60)  # 设置每一行的高度为40\r\n            checkBoxItem = QTableWidgetItem()  # 创建一个表格项\r\n            checkBoxItem.setFlags(Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)  # 设置为可选中且启用\r\n            checkBoxItem.setCheckState(Qt.Unchecked)  # 设置复选框初始状态为未选中\r\n\r\n            # 将复选框添加到表格的第一列\r\n            self.tableWidget.setItem(row, 0, checkBoxItem)\r\n            # 在control_str列（假设为第3列）下添加\"Upload File\"按钮\r\n            upload_button = QPushButton('Upload_File')\r\n            upload_button.clicked.connect(self.on_upload_button_clicked)  # 连接按钮点击事件到槽函数\r\n            self.tableWidget.setCellWidget(row, 2, upload_button)  # 在第3列插入按钮\r\n            self.tableWidget.blockSignals(False)  # 启用信号\r\n            # 连接itemChanged信号到槽函数\r\n            self.tableWidget.itemChanged.connect(self.on_checkbox_state_changed)\r\n\r\n    # 复选框状态改变时的处理函数\r\n    def on_checkbox_state_changed(self, item):\r\n        print(2)\r\n        \"\"\"复选框状态改变时的处理函数\"\"\"\r\n        if item.column() == 0:  # 只处理第一列（复选框列）\r\n            row = item.row()\r\n            check_state = item.checkState()\r\n            if check_state == Qt.Checked:\r\n                print(f\"Checkbox in row {row} is checked!\")\r\n            elif check_state == Qt.Unchecked:\r\n                print(f\"Checkbox in row {row} is unchecked!\")\r\n\r\n    # 假设on_upload_button_clicked是处理按钮点击事件的槽函数\r\n    def on_upload_button_clicked(self):\r\n        print(\"Upload File button clicked!\")\r\n\r\n    def open_patient_manage(self):\r\n        # Create and show the Patient Management window\r\n        self.patient_manage_window = PatientManageWindow(self.tableWidget)\r\n        self.patient_manage_window.show()\r\n\r\n    def open_image(self):\r\n        # Open file dialog to select image\r\n        options = QFileDialog.Options()\r\n        file_types = \"All Files (*);;DICOM Files (*.dcm);;NIfTI Files (*.nii *.nii.gz);;NRRD Files (*.nrrd);;MetaImage Files (*.mha *.mhd)\"\r\n        file_path, _ = QFileDialog.getOpenFileName(self, \"Open Image File\", \"\", file_types, options=options)\r\n        if file_path:\r\n            self.load_image(file_path)\r\n\r\n    def load_image(self, file_path):\r\n        try:\r\n            self.image = sitk.ReadImage(file_path)\r\n            dimension = self.image.GetDimension()\r\n            if dimension == 2:\r\n                # Display 2D image\r\n                image_array = sitk.GetArrayFromImage(self.image)\r\n                self.viewer = XRayViewer(image_array)\r\n                # Disable 3D model and crosshair actions\r\n                #self.generate_model_action.setEnabled(False)\r\n                #self.create_crosshairs_action.setEnabled(False)\r\n            elif dimension == 3:\r\n                # Display 3D image\r\n                self.viewer = CTViewer(self.image, render_model=self.render_on_open)\r\n                #self.viewer.setParent(self)\r\n                #self.generate_model_action.setEnabled(True)\r\n                #self.create_crosshairs_action.setEnabled(True)  # Enable crosshair button\r\n            else:\r\n                QMessageBox.warning(self, \"Unsupported Image\", \"The selected image has unsupported dimensions.\")\r\n                return\r\n\r\n            self.setCentralWidget(self.viewer)\r\n            self.statusBar().showMessage(f'Loaded image: {file_path}')\r\n            self.current_file_path = file_path  # Store the current file path\r\n            self.save_as_action.setEnabled(True)  # Enable \"Save As\"\r\n\r\n        except Exception as e:\r\n            QMessageBox.critical(self, \"Error\", f\"Failed to load image:\\n{str(e)}\")\r\n\r\n    def save_image(self):\r\n        if not hasattr(self, 'image'):\r\n            QMessageBox.warning(self, \"No Image\", \"No image is loaded to save.\")\r\n            return\r\n\r\n        # Define supported formats\r\n        formats = [\r\n            (\"NIfTI (*.nii)\", \"*.nii\"),\r\n            (\"NIfTI Compressed (*.nii.gz)\", \"*.nii.gz\"),\r\n            (\"NRRD (*.nrrd)\", \"*.nrrd\"),\r\n            (\"MetaImage (*.mha *.mhd)\", \"*.mha *.mhd\"),\r\n            (\"DICOM (*.dcm)\", \"*.dcm\"),\r\n            (\"PNG Image (*.png)\", \"*.png\"),\r\n            (\"JPEG Image (*.jpg *.jpeg)\", \"*.jpg *.jpeg\"),\r\n        ]\r\n\r\n        # Create file dialog for saving\r\n        options = QFileDialog.Options()\r\n        file_filter = \";;\".join([desc for desc, ext in formats])\r\n        save_path, selected_filter = QFileDialog.getSaveFileName(\r\n            self, \"Save Image As\", \"\", file_filter, options=options\r\n        )\r\n\r\n        if save_path:\r\n            # Determine the selected format\r\n            for desc, ext in formats:\r\n                if desc == selected_filter:\r\n                    output_extension = ext.replace(\"*\", \"\").strip().split()[0]\r\n                    break\r\n            else:\r\n                output_extension = os.path.splitext(save_path)[1]\r\n\r\n            # Ensure the save path has the correct extension\r\n            if not save_path.lower().endswith(output_extension.lower()):\r\n                save_path += output_extension\r\n\r\n            try:\r\n                # Handle DICOM separately if needed\r\n                if output_extension.lower() == \".dcm\":\r\n                    self.save_as_dicom(self.image, save_path)\r\n                else:\r\n                    sitk.WriteImage(self.image, save_path)\r\n                QMessageBox.information(self, \"Save Successful\", f\"Image saved to {save_path}\")\r\n                self.statusBar().showMessage(f'Image saved to {save_path}')\r\n            except Exception as e:\r\n                QMessageBox.critical(self, \"Save Error\", f\"Failed to save image:\\n{str(e)}\")\r\n\r\n    def save_as_dicom(self, image, save_path):\r\n        # Check if the image is 3D or 2D\r\n        dimension = image.GetDimension()\r\n        if dimension == 3:\r\n            # For 3D images, save each slice as a separate DICOM file\r\n            size = image.GetSize()\r\n            dir_name = os.path.splitext(save_path)[0]  # Remove extension for directory\r\n            if not os.path.exists(dir_name):\r\n                os.makedirs(dir_name)\r\n            for i in range(size[2]):\r\n                slice_i = image[:, :, i]\r\n                slice_filename = os.path.join(dir_name, f\"slice_{i}.dcm\")\r\n                sitk.WriteImage(slice_i, slice_filename)\r\n        else:\r\n            # For 2D images\r\n            sitk.WriteImage(image, save_path) \r\n            \r\n    # def generate_model(self):\r\n    #     if hasattr(self.viewer, 'generate_and_display_model'):\r\n    #         self.viewer.render_model = True\r\n    #         self.viewer.generate_and_display_model()\r\n    #     else:\r\n    #         QMessageBox.warning(self, \"Not Available\", \"Model generation is not available for this image.\")\r\n\r\n    # def create_crosshairs(self):\r\n    #     if self.viewer is None:\r\n    #         QMessageBox.warning(self, \"Not Available\", \"The image viewer is not initialized.\")\r\n    #         return\r\n    #\r\n    #     if hasattr(self.viewer, 'create_crosshairs'):\r\n    #         try:\r\n    #             self.viewer.create_crosshairs()\r\n    #         except Exception as e:\r\n    #             QMessageBox.warning(self, \"Error\", f\"An error occurred while creating crosshairs: {str(e)}\")\r\n    #     else:\r\n    #         QMessageBox.warning(self, \"Not Available\", \"Crosshair functionality is not available for this image viewer.\")\r\n\r\n    def open_settings(self):\r\n        dialog = SettingsDialog(self, render_on_open=self.render_on_open)\r\n        if dialog.exec_():\r\n            settings = dialog.get_settings()\r\n            self.render_on_open = settings['render_on_open']\r\n            \r\n    def closeEvent(self, event):\r\n        # Perform any necessary cleanup\r\n        if self.viewer is not None:\r\n            self.viewer.close()  # Call the viewer's close method\r\n        event.accept()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/system/main_window.py b/system/main_window.py
--- a/system/main_window.py	(revision 5adcc0ca715848c09b2692392e568b00c2057cf4)
+++ b/system/main_window.py	(date 1733655333754)
@@ -17,7 +17,6 @@
         uic.loadUi("ui/main_window.ui", self)  # Load the UI from XML file
         #ui_path = os.path.join(os.path.dirname(__file__), "system/ui/main_window.ui")
         with open('ui/button_style.qss', 'r', encoding='utf-8') as f:
-            #content = f.read()
             self.setStyleSheet(f.read())
         # 获取表格的引用（从 .ui 文件中获取）
         self.tableWidget = self.findChild(QTableWidget, 'tableWidget')
